{"version":3,"sources":["constants/routes.js","components/Sidebar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","lazy","Bubblegum","Shoelaces","Bus","Cart","AmisHome","AmisHomeInfo","AmisHomePreview","AmisHomeAdd","CSS1","CSS2","CSS3","routesWithSub","path","exact","title","component","routes","flatten","arr","reduce","a","b","concat","Array","isArray","AntdSider","Layout","Sider","SubMenu","Menu","withRouter","props","collapsed","history","console","log","pathname","location","split","selectedKeys","length","trigger","collapsedWidth","className","theme","defaultSelectedKeys","mode","map","r","key","rr","Item","to","Header","Content","NoMatch","useLocation","App","useState","setCollapsed","fallback","tip","style","minHeight","padding","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","onClick","margin","route","index","Boolean","window","hostname","match","ReactDOM","render","Fragment","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cdc8b1fc.chunk.js","sourcesContent":["import React, { lazy } from \"react\";\nimport { Route } from \"react-router-dom\";\n\nconst Home = lazy(() => import(\"../pages/Home\"));\nconst Bubblegum = lazy(() => import(\"../pages/Bubblegum\"));\nconst Shoelaces = lazy(() => import(\"../pages/Shoelaces\"));\nconst Bus = lazy(() => import(\"../pages/Bus\"));\nconst Cart = lazy(() => import(\"../pages/Cart\"));\nconst AmisHome = lazy(() => import(\"../pages/Amis\"));\nconst AmisHomeInfo = lazy(() => import(\"../pages/Amis/info\"));\nconst AmisHomePreview = lazy(() => import(\"../pages/Amis/preview\"));\nconst AmisHomeAdd = lazy(() => import(\"../pages/Amis/editor\"));\nconst CSS1 = lazy(() => import(\"../pages/CSS\"));\nconst CSS2 = lazy(() => import(\"../pages/CSS/flex\"));\nconst CSS3 = lazy(() => import(\"../pages/CSS/grid\"));\nconst Grid01 = lazy(() => import(\"../pages/CSS/grid/grid01\"));\nconst Grid02 = lazy(() => import(\"../pages/CSS/grid/grid02/grid02\"));\nconst Grid03 = lazy(() => import(\"../pages/CSS/grid/grid03\"));\nconst Grid04 = lazy(() => import(\"../pages/CSS/grid/grid04\"));\nconst Grid05 = lazy(() => import(\"../pages/CSS/grid/grid05\"));\nconst Grid06 = lazy(() => import(\"../pages/CSS/grid/grid06\"));\nconst Grid07 = lazy(() => import(\"../pages/CSS/grid/grid07\"));\n\nexport const routesWithSub = [\n  {\n    path: \"/\",\n    exact: true,\n    title: \"home\",\n    component: Home,\n  },\n  {\n    path: \"/bubblegum\",\n    title: \"bubblegum\",\n    component: Bubblegum,\n  },\n  {\n    path: \"/shoelaces\",\n    title: \"shoelaces\",\n    component: Shoelaces,\n  },\n  {\n    path: \"/tacos\",\n    title: \"tacos\",\n    routes: [\n      {\n        path: \"/tacos/bus\",\n        title: \"bus\",\n        component: Bus,\n      },\n      {\n        path: \"/tacos/cart\",\n        title: \"cart\",\n        component: Cart,\n      },\n    ],\n  },\n  {\n    path: \"/amis\",\n    title: \"amis\",\n    routes: [\n      {\n        path: \"/amis/home\",\n        title: \"home\",\n        routes: [\n          {\n            path: \"/amis/home\",\n            title: \"home\",\n            component: AmisHome,\n            exact: true,\n          },\n          {\n            path: \"/amis/home/add\",\n            title: \"home add\",\n            component: AmisHomeAdd,\n          },\n          {\n            path: \"/amis/home/info\",\n            title: \"home info\",\n            component: AmisHomeInfo,\n          },\n          {\n            path: \"/amis/home/preview\",\n            title: \"home preview\",\n            component: AmisHomePreview,\n          },\n        ],\n      },\n    ],\n  },\n  {\n    path: \"/css\",\n    title: \"css\",\n    routes: [\n      {\n        path: \"/css/css1\",\n        title: \"CSS1\",\n        routes: [\n          { path: \"/css/css1\", title: \"CSS1\", component: CSS1, exact: true },\n          {\n            path: \"/css/css1/css2\",\n            title: \"CSS11\",\n            component: CSS3,\n          },\n        ],\n      },\n      {\n        path: \"/css/css2\",\n        title: \"flex布局\",\n        component: CSS2,\n      },\n      {\n        path: \"/css/css3\",\n        title: \"grid布局\",\n        component: CSS3,\n      },\n      {\n        path: \"/css/grid01\",\n        title: \"grid布局01\",\n        component: Grid01,\n      },\n      {\n        path: \"/css/grid02\",\n        title: \"grid布局02\",\n        component: Grid02,\n      },\n      {\n        path: \"/css/grid03\",\n        title: \"grid布局03\",\n        component: Grid03,\n      },\n      {\n        path: \"/css/grid04\",\n        title: \"grid布局04\",\n        component: Grid04,\n      },\n      {\n        path: \"/css/grid05\",\n        title: \"grid布局05\",\n        component: Grid05,\n      },\n      {\n        path: \"/css/grid06\",\n        title: \"grid布局06\",\n        component: Grid06,\n      },\n      {\n        path: \"/css/grid07\",\n        title: \"grid布局07\",\n        component: Grid07,\n      },\n    ],\n  },\n];\n\nconst flatten = (arr) =>\n  arr.reduce(\n    (a, b) => a.concat(Array.isArray(b.routes) ? flatten(b.routes) : b),\n    []\n  );\n\nconst routes = flatten(routesWithSub);\n\nexport const RouteWithSubRoutes = (route) => {\n  return (\n    <Route\n      path={route.path}\n      exact={route.exact}\n      render={(props) => (\n        // pass the sub-routes down to keep nesting\n        <route.component {...props} routes={route.routes} />\n      )}\n    />\n  );\n};\n\nexport default routes;\n","import React from \"react\";\nimport { Layout, Menu } from \"antd\";\nimport { Link } from \"react-router-dom\";\nimport { withRouter } from \"react-router\";\nimport \"../../App.less\";\nimport { routesWithSub } from \"../../constants/routes\";\nconst { Sider: AntdSider } = Layout;\nconst { SubMenu } = Menu;\n\nconst Sidebar = (props: any) => {\n  const { collapsed, history } = props;\n  console.log(props);\n\n  const pathname = history.location.pathname.split(\"/\");\n  let selectedKeys = \"\";\n\n  if (pathname.length > 2) {\n    selectedKeys = \"/\" + pathname[1] + \"/\" + pathname[2];\n  } else {\n    selectedKeys = \"/\" + pathname[1];\n  }\n\n  return (\n    <AntdSider trigger={null} collapsedWidth={0} collapsed={collapsed}>\n      <div className=\"logo\" />\n      <Menu\n        theme=\"dark\"\n        defaultSelectedKeys={[\"/\"]}\n        mode=\"inline\"\n        selectedKeys={[selectedKeys]}\n      >\n        {routesWithSub.map((r) => {\n          if (r.routes) {\n            return (\n              <SubMenu key={r.title} title={r.title}>\n                {r.routes.map((rr) => {\n                  return (\n                    <Menu.Item key={rr.path}>\n                      <Link to={rr.path}>{rr.title}</Link>\n                    </Menu.Item>\n                  );\n                })}\n              </SubMenu>\n            );\n          } else {\n            return (\n              <Menu.Item key={r.path}>\n                <Link to={r.path}>{r.title}</Link>\n              </Menu.Item>\n            );\n          }\n        })}\n      </Menu>\n    </AntdSider>\n  );\n};\n\nexport default withRouter(Sidebar);\n","import React, { FC, useState, Suspense } from \"react\";\nimport { Layout, Spin } from \"antd\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  useLocation,\n} from \"react-router-dom\";\nimport { MenuFoldOutlined, MenuUnfoldOutlined } from \"@ant-design/icons\";\nimport \"./App.less\";\nimport \"amis/lib/themes/default.css\";\nimport \"amis-editor/dist/style.css\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport routes from \"./constants/routes\";\nimport Sidebar from \"./components/Sidebar\";\n// import \"./mock/mock.js\";\nconst { Header, Content } = Layout;\n\nfunction NoMatch() {\n  let location = useLocation();\n\n  return (\n    <div>\n      <h3>\n        No match for <code>{location.pathname}</code>\n      </h3>\n    </div>\n  );\n}\n\nconst App: FC = () => {\n  const [collapsed, setCollapsed] = useState<boolean>(false);\n\n  return (\n    <Suspense fallback={<Spin tip=\"Loading...\" />}>\n      <Router>\n        <Layout style={{ minHeight: \"100vh\" }}>\n          <Sidebar collapsed={collapsed} />\n\n          <Layout className=\"site-layout\">\n            <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n              {React.createElement(\n                collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,\n                {\n                  className: \"trigger\",\n                  onClick: () => {\n                    setCollapsed(!collapsed);\n                  },\n                }\n              )}\n            </Header>\n            <Content\n              className=\"site-layout-background\"\n              style={{\n                margin: \"24px 16px\",\n                padding: 24,\n                minHeight: 280,\n              }}\n            >\n              <Switch>\n                {routes.map(\n                  (\n                    route: { path: string; exact: boolean; component: any },\n                    index: number\n                  ) => (\n                    <Route\n                      key={index + route.path}\n                      path={route.path}\n                      exact={route.exact}\n                      component={route.component}\n                    />\n                  )\n                )}\n                <Route path=\"*\">\n                  <NoMatch />\n                </Route>\n              </Switch>\n            </Content>\n          </Layout>\n        </Layout>\n      </Router>\n    </Suspense>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}